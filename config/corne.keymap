#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        comma_qmark: comma_question_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_excl: dot_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_equal: plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp EQUAL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        semi_colon_combo: semi_colon_combo {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_COLON_COMBO";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word_toggle>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <33 32>; // Comma and period
            bindings = <&semi_colon_combo>;
            layers = <0>;
        };

        combo_play_pause {
            timeout-ms = <50>;
            key-positions = <7 8>; // Prev and next in controls layer
            bindings = <&kp C_PP>;
            layers = <3>;
        };

        combo_mute {
            timeout-ms = <50>;
            key-positions = <20 21>; // Volume down and up in controls layer
            bindings = <&kp C_MUTE>;
            layers = <3>;
        };
    };

    macros {
        desktop_1: desktop_1 {
            label = "DESKTOP_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp KP_N1>,
                <&macro_release>,
                <&kp LGUI>;
        };

        tab_prev: tab_next {
            label = "TAB_NEXT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;
        };

        ctrl_alt_del: ctrl_alt_del {
            label = "CTRL_ALT_DEL";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LALT>,
                <&macro_tap>,
                <&kp DEL>,
                <&macro_release>,
                <&kp LCTRL &kp LALT>;
        };

        desktop_2: desktop_2 {
            compatible = "zmk,behavior-macro";
            label = "DESKTOP_2";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp KP_N2>,
                <&macro_release>,
                <&kp LGUI>;
        };

        caps_word_toggle: caps_word_toggle {
            label = "CAPS_WORD_TOGGLE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC           &kp Q  &kp W  &kp F        &kp P      &kp B    &kp J  &kp L      &kp U          &kp Y      &kp BACKSPACE  &kp DEL
&kp LEFT_GUI      &kp A  &kp R  &kp S        &kp T      &kp G    &kp M  &kp N      &kp E          &kp I      &kp O          &kp TAB
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C        &kp D      &kp V    &kp K  &kp H      &comma_qmark   &dot_excl  &kp MINUS      &kp SINGLE_QUOTE
                                &shift_caps  &kp SPACE  &mo 1    &mo 2  &kp ENTER  &kp RIGHT_ALT
            >;
        };

        symnum_layer {
            bindings = <
&kp TILDE      &kp GRAVE  &kp AT            &kp HASH  &kp DLLR  &kp PRCNT    &kp STAR   &kp N7  &kp N8  &kp N9  &trans       &trans
&kp CARET      &kp AMPS   &kp LESS_THAN     &kp LPAR  &kp LBRC  &kp LBKT     &kp SLASH  &kp N4  &kp N5  &kp N6  &plus_equal  &trans
&kp BACKSLASH  &kp PIPE   &kp GREATER_THAN  &kp RPAR  &kp RBRC  &kp RBKT     &kp DOT    &kp N1  &kp N2  &kp N3  &trans       &trans
                                            &none     &trans    &trans       &trans     &trans  &kp N0
            >;
        };

        nav_layer {
            bindings = <
&kp F1  &kp F2  &kp F3    &kp F4      &kp F5      &kp F6             &kp F7    &kp F8    &kp F9         &kp F10    &kp F11  &kp F12
&trans  &none   &kp HOME  &kp PG_UP   &kp PG_DN   &kp END            &kp LEFT  &kp DOWN  &kp UP         &kp RIGHT  &trans   &trans
&trans  &none   &none     &desktop_2  &desktop_1  &kp PRINTSCREEN    &none     &none     &none          &none      &trans   &tab_prev
                          &trans      &trans      &mo 3              &trans    &trans    &kp RIGHT_ALT
            >;
        };

        controls_layer {
            bindings = <
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &none  &kp C_PREV    &kp C_NEXT       &none          &none                 &none
&kp C_SLEEP  &kp C_POWER   &none         &none         &none         &none            &none  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_BRI_DEC  &kp C_BRIGHTNESS_INC  &none
&bootloader  &sys_reset    &none         &none         &none         &none            &none  &none         &none            &none          &none                 &none
                                         &trans        &none         &ctrl_alt_del    &none  &none         &none
            >;
        };
    };
};

